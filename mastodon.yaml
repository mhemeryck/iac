# postgres
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mastodon-pgdata
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mastodon-postgres
spec:
  selector:
    matchLabels:
      app: mastodon-postgres
  serviceName: mastodon-postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: mastodon-postgres
    spec:
      volumes:
        - name: mastodon-pgdata
          persistentVolumeClaim:
            claimName: mastodon-pgdata
      containers:
        - name: mastodon-postgres
          image: postgres:15.1-alpine3.16
          resources:
            limits:
              memory: 1Gi
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: mastodon-pgdata
              mountPath: /var/lib/postgresql/data
          env:
            - name: POSTGRES_DB
              value: mastodon
            - name: POSTGRES_USER
              value: mastodon
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mastodon
                  key: postgres_password
---
apiVersion: v1
kind: Service
metadata:
  name: mastodon-postgres
spec:
  selector:
    app: mastodon-postgres
  ports:
    - port: 5432
      targetPort: 5432

# redis
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mastodon-redis
spec:
  selector:
    matchLabels:
      app: mastodon-redis
  serviceName: mastodon-redis
  replicas: 1
  template:
    metadata:
      labels:
        app: mastodon-redis
    spec:
      containers:
        - name: mastodon-redis
          image: redis:7-alpine
---
apiVersion: v1
kind: Service
metadata:
  name: mastodon-redis
spec:
  selector:
    app: mastodon-redis
  ports:
    - port: 6379

# shared web config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mastodon
data:
  LOCAL_DOMAIN: mastodon.mhemeryck.com
  REDIS_HOST: mastodon-redis
  REDIS_PORT: "6379"
  DB_HOST: mastodon-postgres
  DB_USER: mastodon
  DB_PORT: "5432"
  DB_NAME: mastodon
  IP_RETENTION_PERIOD: "31556952"
  SESSION_RETENTION_PERIOD: "31556952"
  SMTP_SERVER: smtp.sendgrid.net
  SMTP_PORT: "587"
  SMTP_FROM_ADDRESS: mastodon@mhemeryck.com

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mastodon-public-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
# web
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mastodon-web
spec:
  selector:
    matchLabels:
      app: mastodon-web
  template:
    metadata:
      labels:
        app: mastodon-web
    spec:
      volumes:
        - name: mastodon-public-system
          persistentVolumeClaim:
            claimName: mastodon-public-system
      containers:
        - name: mastodon-web
          image: tootsuite/mastodon:v3.5.8
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: mastodon-public-system
              mountPath: /mastodon/public/system
          envFrom:
            - configMapRef:
                name: mastodon
            - secretRef:
                name: mastodon
          command: ["/bin/sh"]
          args:
            - -c
            - |
              rm -f /mastodon/tmp/pids/server.pid
              bundle exec rails s -p 3000
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: mastodon-web
spec:
  selector:
    app: mastodon-web
  ports:
    - port: 80
      targetPort: 3000

# streaming
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mastodon-streaming
spec:
  selector:
    matchLabels:
      app: mastodon-streaming
  template:
    metadata:
      labels:
        app: mastodon-streaming
    spec:
      containers:
        - name: mastodon-streaming
          image: tootsuite/mastodon:v3.5.8
          ports:
            - containerPort: 4000
          envFrom:
            - configMapRef:
                name: mastodon
            - secretRef:
                name: mastodon
          command: ["node"]
          args:
            - ./streaming
          livenessProbe:
            httpGet:
              path: /api/v1/streaming/health
              port: 4000
            initialDelaySeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: mastodon-streaming
spec:
  selector:
    app: mastodon-streaming
  ports:
    - port: 80
      targetPort: 4000

# sidekiq
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mastodon-sidekiq
spec:
  selector:
    matchLabels:
      app: mastodon-sidekiq
  template:
    metadata:
      labels:
        app: mastodon-sidekiq
    spec:
      volumes:
        - name: mastodon-public-system
          persistentVolumeClaim:
            claimName: mastodon-public-system
      containers:
        - name: mastodon-sidekiq
          image: tootsuite/mastodon:v3.5.8
          volumeMounts:
            - name: mastodon-public-system
              mountPath: /mastodon/public/system
          envFrom:
            - configMapRef:
                name: mastodon
            - secretRef:
                name: mastodon
          command: ["/bin/sh"]
          args:
            - -c
            - |
              bundle exec sidekiq
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: mastodon-cleanup
spec:
  schedule: "0 0 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          volumes:
            - name: mastodon-public-system
              persistentVolumeClaim:
                claimName: mastodon-public-system
          containers:
            - name: mastodon-cleanup
              image: tootsuite/mastodon:v3.5.8
              volumeMounts:
                - name: mastodon-public-system
                  mountPath: /mastodon/public/system
              envFrom:
                - configMapRef:
                    name: mastodon
                - secretRef:
                    name: mastodon
              command: ["/bin/sh"]
              args:
                - -c
                - |
                  tootctl media remove --days=7
                  tootctl preview-cards remove --days=7
                  tootctl statuses remove --days=3
                  tootctl media remove-orphans
